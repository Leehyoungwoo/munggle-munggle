stages:
#  - build
  - deploy

#build: #JOB 이름
#  image: gradle:8.5.0-jdk17
#  stage: build
#  script:
#    - echo [INFO] YML Settings
#    - cd ./back/munggle/src/main/resources
#    - echo "$APPLICATION_YML" > "application.yml"
#    - cd ../../..
#    - chmod +x gradlew
#    - ./gradlew clean
#    - ./gradlew bootJar
#  artifacts:
#    paths:
#      - back/munggle/build/libs/*.jar
#    expire_in: 1 days
#  only:
#    - develop/back

deploy: #JOB 이름
  image: docker:latest
  stage: deploy
  services:
    - docker:24.0.7-dind
  before_script:
    - echo [INFO] docker deploy start!
    - echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u $DOCKER_REGISTRY_USER --password-stdin
    - docker rm -f munggle-api
  script:
    - cd ./back/munggle
    - echo "$APPLICATION_DB_YAML" > ./src/main/resources/application-db.yaml
    - echo "$APPLICATION_SECURITY_YAML" > ./src/main/resources/application-security.yaml
    - echo "$APPLICATION_CLOUD_YAML" > ./src/main/resources/application-cloud.yaml
    - echo "$APPLICATION_API_YAML" > ./src/main/resources/application-api.yaml
    - echo "$APPLICATION_EMAIL_YAML" > ./src/main/resources/application-email.yaml
    - chmod +x ./deploy/build-image.sh
    - ./deploy/build-image.sh $CI_REGISTRY
    - docker push $CI_REGISTRY
    - docker run -d --name munggle-api --network backend -p 8080:8080 -e ENV=prod $CI_REGISTRY
  after_script:
    - docker logout
    - echo [INFO] docker deploy end!
  only:
    - release/back
